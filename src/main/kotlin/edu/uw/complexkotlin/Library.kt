/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package edu.uw.complexkotlin

// Extra credit:
// Seneca the Younger was a Roman philosopher, playwright and statesman who is associated with the
// school of Stoicism. Stoicism can be summarized as a philosophy that focuses on developing
// yourself by teaching people to focus on what they can control like their own thoughts and
// emotions and accept what they cannot control like actions of other people.


// write a lambda using map and fold to solve "FIZZBUZZ" for the first fifteen numbers (0..15).
// use map() to return a list with "", "FIZZ" (for 3s) or "BUZZ" (for 5s).
// use fold() to compress the array of strings down into a single string.
// the final string should look like FIZZBUZZFIZZFIZZBUZZFIZZFIZZBUZZ for 0..15.
// store this lambda into 'fizzbuzz' so that the tests can call it
//
val fizzbuzz: (IntRange) -> String = { numbers: IntRange ->
    numbers.map { number: Int ->
        when {
            number % 3 == 0 && number % 5 == 0 -> "FIZZBUZZ"
            number % 3 == 0 -> "FIZZ"
            number % 5 == 0 -> "BUZZ"
            else -> ""
        }
    }.fold("") { acc, str -> acc + str }
}
val numbers = 0..15
val result = fizzbuzz(numbers);
val numberFifty = 1..50
val fifty = fizzbuzz(numberFifty);
val numberHundred = 1..100
val hundred = fizzbuzz(numberHundred);

val fizzbuzzgen: (Map<Int, String>) -> (IntRange) -> String = { divisors: Map<Int, String> ->
    { numbers: IntRange ->
        numbers.map { number: Int ->
            divisors.entries.joinToString("") { entry ->
                if (number % entry.key == 0) entry.value else ""
            }
        }.fold("") { acc, str -> acc + str }
    }
}
// Example usage
/*
if (fizzbuzz(1..2) == "")
    println("Success!")
if (fizzbuzz(1..3) == "FIZZ")
    println("Success!")
if (fizzbuzz(1..5) == "FIZZBUZZ")
    println("Success!")
*/

// This is a utility function for your use as you choose, and as an
// example of an extension method
fun Int.times(block: () -> Unit): Unit {
    for (it in 1..this) {
        block()
    }
}

// Use this function
fun process(message: String, block: (String) -> String): String {
    return ">>> ${message}: {" + block(message) + "}"
}
// Create r1 as a lambda that calls process() with message "FOO" and a block that returns "BAR"
val r1 = {
    process("FOO") {"BAR"}
}

// Create r2 as a lambda that calls process() with message "FOO" and a block that upper-cases
// r2_message, and repeats it three times with no spaces: "WOOGAWOOGAWOOGA"
val r2_message = "wooga"
val r2 = {
    process("FOO") { r2_message.toUpperCase().replace(" ", "").repeat(3) }
 }


// write an enum-based state machine between talking and thinking
enum class Philosopher {
    TALKING {
        override fun toString() = "Allow me to suggest an idea..."
    },
    THINKING {
        override fun toString() = "Deep thoughts...."
    };
    fun signal(): Philosopher {
        return if(this == TALKING) THINKING else TALKING
    }
}

// create an class "Command" that can be used as a function.
// To do this, provide an "invoke()" function that takes a
// single parameter ("message" of type String). Command's
// primary constructor should take a String argument ("prompt").
// When invoked, the Command object should return a String
// containing the prompt and then the message.
// Example:
// val cmd = Command(": ")
// val result = cmd("Hello!")
// result should equal ": Hello!"
class Command(val prompt: String) {
    operator fun invoke(message: String): String {
        return prompt + message;
    }
}
